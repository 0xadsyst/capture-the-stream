/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace CaptureTheStream {
  export type GuessStruct = {
    user: PromiseOrValue<string>;
    guess: PromiseOrValue<BigNumberish>;
    timeWinning: PromiseOrValue<BigNumberish>;
    disableEndTimestamp: PromiseOrValue<BigNumberish>;
    enableEndTimestamp: PromiseOrValue<BigNumberish>;
  };

  export type GuessStructOutput = [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    user: string;
    guess: BigNumber;
    timeWinning: BigNumber;
    disableEndTimestamp: BigNumber;
    enableEndTimestamp: BigNumber;
  };
}

export interface CaptureTheStreamInterface extends utils.Interface {
  functions: {
    "checkUpkeep(bytes)": FunctionFragment;
    "deposit(uint256)": FunctionFragment;
    "depositAsset()": FunctionFragment;
    "deposits(address)": FunctionFragment;
    "enterRound(uint256,int256)": FunctionFragment;
    "fulfillPowerUp(string,uint256[])": FunctionFragment;
    "getLatestPrice(address)": FunctionFragment;
    "getPowerUp(uint256)": FunctionFragment;
    "getRoundsToUpdate()": FunctionFragment;
    "initiateRound(address,uint256,uint256,uint256,uint256,uint256,uint256,bool)": FunctionFragment;
    "owner()": FunctionFragment;
    "performUpkeep(bytes)": FunctionFragment;
    "rawFulfillRandomWords(uint256,uint256[])": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "roundCount()": FunctionFragment;
    "rounds(uint256)": FunctionFragment;
    "setDepositAsset(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateRound(uint256,bool)": FunctionFragment;
    "usePowerUp(string,uint256,int256)": FunctionFragment;
    "vrfCoordinator()": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "checkUpkeep"
      | "deposit"
      | "depositAsset"
      | "deposits"
      | "enterRound"
      | "fulfillPowerUp"
      | "getLatestPrice"
      | "getPowerUp"
      | "getRoundsToUpdate"
      | "initiateRound"
      | "owner"
      | "performUpkeep"
      | "rawFulfillRandomWords"
      | "renounceOwnership"
      | "roundCount"
      | "rounds"
      | "setDepositAsset"
      | "transferOwnership"
      | "updateRound"
      | "usePowerUp"
      | "vrfCoordinator"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "checkUpkeep",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "depositAsset",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposits",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "enterRound",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "fulfillPowerUp",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getLatestPrice",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPowerUp",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoundsToUpdate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initiateRound",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "performUpkeep",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "rawFulfillRandomWords",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "roundCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rounds",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDepositAsset",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRound",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "usePowerUp",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "vrfCoordinator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "checkUpkeep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposits", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "enterRound", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fulfillPowerUp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLatestPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPowerUp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoundsToUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initiateRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "performUpkeep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rawFulfillRandomWords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "roundCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rounds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDepositAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usePowerUp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "vrfCoordinator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Deposit(address,uint256,uint256)": EventFragment;
    "EndWinner(uint256,uint256,address,int256,int256,uint256)": EventFragment;
    "InitiateRound(uint256,address,uint256,uint256,uint256,uint256,uint256,uint256,bool)": EventFragment;
    "NewGuess(uint256,uint256,address,uint256,int256,uint256,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PowerUpEvent(string,address,uint256,string,string,uint256,uint256,bool,uint256)": EventFragment;
    "StartWinner(uint256,uint256,address,int256,int256)": EventFragment;
    "WinningGuesses(tuple[])": EventFragment;
    "Withdraw(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EndWinner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InitiateRound"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewGuess"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PowerUpEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StartWinner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WinningGuesses"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export interface DepositEventObject {
  user: string;
  depositAmount: BigNumber;
  balance: BigNumber;
}
export type DepositEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  DepositEventObject
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface EndWinnerEventObject {
  roundId: BigNumber;
  winningGuessIndex: BigNumber;
  winnerAddress: string;
  winningGuess: BigNumber;
  currentPrice: BigNumber;
  timeWinning: BigNumber;
}
export type EndWinnerEvent = TypedEvent<
  [BigNumber, BigNumber, string, BigNumber, BigNumber, BigNumber],
  EndWinnerEventObject
>;

export type EndWinnerEventFilter = TypedEventFilter<EndWinnerEvent>;

export interface InitiateRoundEventObject {
  roundId: BigNumber;
  oracle: string;
  startTimestamp: BigNumber;
  endTimestamp: BigNumber;
  guessCutOffTimestamp: BigNumber;
  numberOfGuessesAllowed: BigNumber;
  minimumGuessSpacing: BigNumber;
  guessCost: BigNumber;
  inRoundGuessesAllowed: boolean;
}
export type InitiateRoundEvent = TypedEvent<
  [
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean
  ],
  InitiateRoundEventObject
>;

export type InitiateRoundEventFilter = TypedEventFilter<InitiateRoundEvent>;

export interface NewGuessEventObject {
  roundId: BigNumber;
  guessIndex: BigNumber;
  user: string;
  balance: BigNumber;
  guess: BigNumber;
  guessCost: BigNumber;
  disableEndTimestamp: BigNumber;
  enableEndTimestamp: BigNumber;
}
export type NewGuessEvent = TypedEvent<
  [
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  NewGuessEventObject
>;

export type NewGuessEventFilter = TypedEventFilter<NewGuessEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PowerUpEventEventObject {
  id: string;
  user: string;
  roundId: BigNumber;
  status: string;
  typeOf: string;
  length: BigNumber;
  endTime: BigNumber;
  selectableTarget: boolean;
  target: BigNumber;
}
export type PowerUpEventEvent = TypedEvent<
  [
    string,
    string,
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber,
    boolean,
    BigNumber
  ],
  PowerUpEventEventObject
>;

export type PowerUpEventEventFilter = TypedEventFilter<PowerUpEventEvent>;

export interface StartWinnerEventObject {
  roundId: BigNumber;
  winningGuessIndex: BigNumber;
  winnerAddress: string;
  winningGuess: BigNumber;
  currentPrice: BigNumber;
}
export type StartWinnerEvent = TypedEvent<
  [BigNumber, BigNumber, string, BigNumber, BigNumber],
  StartWinnerEventObject
>;

export type StartWinnerEventFilter = TypedEventFilter<StartWinnerEvent>;

export interface WinningGuessesEventObject {
  winningGuesses: CaptureTheStream.GuessStructOutput[];
}
export type WinningGuessesEvent = TypedEvent<
  [CaptureTheStream.GuessStructOutput[]],
  WinningGuessesEventObject
>;

export type WinningGuessesEventFilter = TypedEventFilter<WinningGuessesEvent>;

export interface WithdrawEventObject {
  user: string;
  withdrawAmount: BigNumber;
  balance: BigNumber;
}
export type WithdrawEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  WithdrawEventObject
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface CaptureTheStream extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CaptureTheStreamInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    checkUpkeep(
      checkData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string] & { upkeepNeeded: boolean; performData: string }
    >;

    deposit(
      _depositAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositAsset(overrides?: CallOverrides): Promise<[string]>;

    deposits(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    enterRound(
      _roundId: PromiseOrValue<BigNumberish>,
      _guess: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fulfillPowerUp(
      _powerUpId: PromiseOrValue<string>,
      _randomWords: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getLatestPrice(
      _oracle: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPowerUp(
      _roundId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getRoundsToUpdate(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber[]]>;

    initiateRound(
      _oracle: PromiseOrValue<string>,
      _startTimestamp: PromiseOrValue<BigNumberish>,
      _endTimestamp: PromiseOrValue<BigNumberish>,
      _guessCutOffTimestamp: PromiseOrValue<BigNumberish>,
      _numberOfGuessesAllowed: PromiseOrValue<BigNumberish>,
      _minimumGuessSpacing: PromiseOrValue<BigNumberish>,
      _guessCost: PromiseOrValue<BigNumberish>,
      _inRoundGuessesAllowed: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    performUpkeep(
      performData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rawFulfillRandomWords(
      requestId: PromiseOrValue<BigNumberish>,
      randomWords: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    roundCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    rounds(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        oracle: string;
        startTimestamp: BigNumber;
        endTimestamp: BigNumber;
        guessCutOffTimestamp: BigNumber;
        numberOfGuessesAllowed: BigNumber;
        minimumGuessSpacing: BigNumber;
        guessCost: BigNumber;
        inRoundGuessesAllowed: boolean;
        currentWinnerIndex: BigNumber;
        lastWinnerChange: BigNumber;
        deposits: BigNumber;
        roundClosed: boolean;
      }
    >;

    setDepositAsset(
      _asset: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateRound(
      _roundId: PromiseOrValue<BigNumberish>,
      _forceUpdate: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    usePowerUp(
      _powerUpId: PromiseOrValue<string>,
      _target: PromiseOrValue<BigNumberish>,
      _guess: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    vrfCoordinator(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      _withdrawAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  checkUpkeep(
    checkData: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [boolean, string] & { upkeepNeeded: boolean; performData: string }
  >;

  deposit(
    _depositAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositAsset(overrides?: CallOverrides): Promise<string>;

  deposits(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  enterRound(
    _roundId: PromiseOrValue<BigNumberish>,
    _guess: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fulfillPowerUp(
    _powerUpId: PromiseOrValue<string>,
    _randomWords: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getLatestPrice(
    _oracle: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPowerUp(
    _roundId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getRoundsToUpdate(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber[]]>;

  initiateRound(
    _oracle: PromiseOrValue<string>,
    _startTimestamp: PromiseOrValue<BigNumberish>,
    _endTimestamp: PromiseOrValue<BigNumberish>,
    _guessCutOffTimestamp: PromiseOrValue<BigNumberish>,
    _numberOfGuessesAllowed: PromiseOrValue<BigNumberish>,
    _minimumGuessSpacing: PromiseOrValue<BigNumberish>,
    _guessCost: PromiseOrValue<BigNumberish>,
    _inRoundGuessesAllowed: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  performUpkeep(
    performData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rawFulfillRandomWords(
    requestId: PromiseOrValue<BigNumberish>,
    randomWords: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  roundCount(overrides?: CallOverrides): Promise<BigNumber>;

  rounds(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean
    ] & {
      oracle: string;
      startTimestamp: BigNumber;
      endTimestamp: BigNumber;
      guessCutOffTimestamp: BigNumber;
      numberOfGuessesAllowed: BigNumber;
      minimumGuessSpacing: BigNumber;
      guessCost: BigNumber;
      inRoundGuessesAllowed: boolean;
      currentWinnerIndex: BigNumber;
      lastWinnerChange: BigNumber;
      deposits: BigNumber;
      roundClosed: boolean;
    }
  >;

  setDepositAsset(
    _asset: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateRound(
    _roundId: PromiseOrValue<BigNumberish>,
    _forceUpdate: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  usePowerUp(
    _powerUpId: PromiseOrValue<string>,
    _target: PromiseOrValue<BigNumberish>,
    _guess: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  vrfCoordinator(overrides?: CallOverrides): Promise<string>;

  withdraw(
    _withdrawAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    checkUpkeep(
      checkData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string] & { upkeepNeeded: boolean; performData: string }
    >;

    deposit(
      _depositAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    depositAsset(overrides?: CallOverrides): Promise<string>;

    deposits(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    enterRound(
      _roundId: PromiseOrValue<BigNumberish>,
      _guess: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    fulfillPowerUp(
      _powerUpId: PromiseOrValue<string>,
      _randomWords: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    getLatestPrice(
      _oracle: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPowerUp(
      _roundId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getRoundsToUpdate(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber[]]>;

    initiateRound(
      _oracle: PromiseOrValue<string>,
      _startTimestamp: PromiseOrValue<BigNumberish>,
      _endTimestamp: PromiseOrValue<BigNumberish>,
      _guessCutOffTimestamp: PromiseOrValue<BigNumberish>,
      _numberOfGuessesAllowed: PromiseOrValue<BigNumberish>,
      _minimumGuessSpacing: PromiseOrValue<BigNumberish>,
      _guessCost: PromiseOrValue<BigNumberish>,
      _inRoundGuessesAllowed: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    performUpkeep(
      performData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    rawFulfillRandomWords(
      requestId: PromiseOrValue<BigNumberish>,
      randomWords: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    roundCount(overrides?: CallOverrides): Promise<BigNumber>;

    rounds(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        oracle: string;
        startTimestamp: BigNumber;
        endTimestamp: BigNumber;
        guessCutOffTimestamp: BigNumber;
        numberOfGuessesAllowed: BigNumber;
        minimumGuessSpacing: BigNumber;
        guessCost: BigNumber;
        inRoundGuessesAllowed: boolean;
        currentWinnerIndex: BigNumber;
        lastWinnerChange: BigNumber;
        deposits: BigNumber;
        roundClosed: boolean;
      }
    >;

    setDepositAsset(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateRound(
      _roundId: PromiseOrValue<BigNumberish>,
      _forceUpdate: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    usePowerUp(
      _powerUpId: PromiseOrValue<string>,
      _target: PromiseOrValue<BigNumberish>,
      _guess: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    vrfCoordinator(overrides?: CallOverrides): Promise<string>;

    withdraw(
      _withdrawAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Deposit(address,uint256,uint256)"(
      user?: null,
      depositAmount?: null,
      balance?: null
    ): DepositEventFilter;
    Deposit(
      user?: null,
      depositAmount?: null,
      balance?: null
    ): DepositEventFilter;

    "EndWinner(uint256,uint256,address,int256,int256,uint256)"(
      roundId?: null,
      winningGuessIndex?: null,
      winnerAddress?: null,
      winningGuess?: null,
      currentPrice?: null,
      timeWinning?: null
    ): EndWinnerEventFilter;
    EndWinner(
      roundId?: null,
      winningGuessIndex?: null,
      winnerAddress?: null,
      winningGuess?: null,
      currentPrice?: null,
      timeWinning?: null
    ): EndWinnerEventFilter;

    "InitiateRound(uint256,address,uint256,uint256,uint256,uint256,uint256,uint256,bool)"(
      roundId?: null,
      oracle?: null,
      startTimestamp?: null,
      endTimestamp?: null,
      guessCutOffTimestamp?: null,
      numberOfGuessesAllowed?: null,
      minimumGuessSpacing?: null,
      guessCost?: null,
      inRoundGuessesAllowed?: null
    ): InitiateRoundEventFilter;
    InitiateRound(
      roundId?: null,
      oracle?: null,
      startTimestamp?: null,
      endTimestamp?: null,
      guessCutOffTimestamp?: null,
      numberOfGuessesAllowed?: null,
      minimumGuessSpacing?: null,
      guessCost?: null,
      inRoundGuessesAllowed?: null
    ): InitiateRoundEventFilter;

    "NewGuess(uint256,uint256,address,uint256,int256,uint256,uint256,uint256)"(
      roundId?: null,
      guessIndex?: null,
      user?: null,
      balance?: null,
      guess?: null,
      guessCost?: null,
      disableEndTimestamp?: null,
      enableEndTimestamp?: null
    ): NewGuessEventFilter;
    NewGuess(
      roundId?: null,
      guessIndex?: null,
      user?: null,
      balance?: null,
      guess?: null,
      guessCost?: null,
      disableEndTimestamp?: null,
      enableEndTimestamp?: null
    ): NewGuessEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "PowerUpEvent(string,address,uint256,string,string,uint256,uint256,bool,uint256)"(
      id?: null,
      user?: null,
      roundId?: null,
      status?: null,
      typeOf?: null,
      length?: null,
      endTime?: null,
      selectableTarget?: null,
      target?: null
    ): PowerUpEventEventFilter;
    PowerUpEvent(
      id?: null,
      user?: null,
      roundId?: null,
      status?: null,
      typeOf?: null,
      length?: null,
      endTime?: null,
      selectableTarget?: null,
      target?: null
    ): PowerUpEventEventFilter;

    "StartWinner(uint256,uint256,address,int256,int256)"(
      roundId?: null,
      winningGuessIndex?: null,
      winnerAddress?: null,
      winningGuess?: null,
      currentPrice?: null
    ): StartWinnerEventFilter;
    StartWinner(
      roundId?: null,
      winningGuessIndex?: null,
      winnerAddress?: null,
      winningGuess?: null,
      currentPrice?: null
    ): StartWinnerEventFilter;

    "WinningGuesses(tuple[])"(winningGuesses?: null): WinningGuessesEventFilter;
    WinningGuesses(winningGuesses?: null): WinningGuessesEventFilter;

    "Withdraw(address,uint256,uint256)"(
      user?: null,
      withdrawAmount?: null,
      balance?: null
    ): WithdrawEventFilter;
    Withdraw(
      user?: null,
      withdrawAmount?: null,
      balance?: null
    ): WithdrawEventFilter;
  };

  estimateGas: {
    checkUpkeep(
      checkData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deposit(
      _depositAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositAsset(overrides?: CallOverrides): Promise<BigNumber>;

    deposits(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    enterRound(
      _roundId: PromiseOrValue<BigNumberish>,
      _guess: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fulfillPowerUp(
      _powerUpId: PromiseOrValue<string>,
      _randomWords: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getLatestPrice(
      _oracle: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPowerUp(
      _roundId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getRoundsToUpdate(overrides?: CallOverrides): Promise<BigNumber>;

    initiateRound(
      _oracle: PromiseOrValue<string>,
      _startTimestamp: PromiseOrValue<BigNumberish>,
      _endTimestamp: PromiseOrValue<BigNumberish>,
      _guessCutOffTimestamp: PromiseOrValue<BigNumberish>,
      _numberOfGuessesAllowed: PromiseOrValue<BigNumberish>,
      _minimumGuessSpacing: PromiseOrValue<BigNumberish>,
      _guessCost: PromiseOrValue<BigNumberish>,
      _inRoundGuessesAllowed: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    performUpkeep(
      performData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rawFulfillRandomWords(
      requestId: PromiseOrValue<BigNumberish>,
      randomWords: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    roundCount(overrides?: CallOverrides): Promise<BigNumber>;

    rounds(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setDepositAsset(
      _asset: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateRound(
      _roundId: PromiseOrValue<BigNumberish>,
      _forceUpdate: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    usePowerUp(
      _powerUpId: PromiseOrValue<string>,
      _target: PromiseOrValue<BigNumberish>,
      _guess: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    vrfCoordinator(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _withdrawAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    checkUpkeep(
      checkData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deposit(
      _depositAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositAsset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposits(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    enterRound(
      _roundId: PromiseOrValue<BigNumberish>,
      _guess: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fulfillPowerUp(
      _powerUpId: PromiseOrValue<string>,
      _randomWords: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getLatestPrice(
      _oracle: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPowerUp(
      _roundId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getRoundsToUpdate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initiateRound(
      _oracle: PromiseOrValue<string>,
      _startTimestamp: PromiseOrValue<BigNumberish>,
      _endTimestamp: PromiseOrValue<BigNumberish>,
      _guessCutOffTimestamp: PromiseOrValue<BigNumberish>,
      _numberOfGuessesAllowed: PromiseOrValue<BigNumberish>,
      _minimumGuessSpacing: PromiseOrValue<BigNumberish>,
      _guessCost: PromiseOrValue<BigNumberish>,
      _inRoundGuessesAllowed: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    performUpkeep(
      performData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rawFulfillRandomWords(
      requestId: PromiseOrValue<BigNumberish>,
      randomWords: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    roundCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rounds(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setDepositAsset(
      _asset: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateRound(
      _roundId: PromiseOrValue<BigNumberish>,
      _forceUpdate: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    usePowerUp(
      _powerUpId: PromiseOrValue<string>,
      _target: PromiseOrValue<BigNumberish>,
      _guess: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    vrfCoordinator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      _withdrawAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
